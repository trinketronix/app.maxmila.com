<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.3.4/dist/js/datepicker-full.min.js"></script>

<script>
    $(document).ready(function() {
        // --- GLOBAL VARIABLES & STATE ---
        const baseUrl = '<?=$baseUrl ?? ''?>';
        const authToken = '<?=$authToken ?? ''?>';
        const caregiverId = <?=$userId ?? 'null'?>;
        const caregiverFullname = '<?=$fullname ?? 'Me'?>';

        const newVisitState = {
            caregiverId: caregiverId,
            caregiverFullname: caregiverFullname,
            patientId: null, patientFullname: null,
            addressId: null, address: null,
            visitDate: null,
            startTime: null,
            totalHours: null
        };

        let allVisits = [], allAssignedPatients = [], allPatientAddresses = [];
        let visitConfirmationModal, assignVisitOffcanvas, actionsModal, cancelConfirmModal;
        let selectedVisitId = null;

        // --- INITIALIZE BOOTSTRAP COMPONENTS ---
        actionsModal = new bootstrap.Modal(document.getElementById('actionsModal'));
        cancelConfirmModal = new bootstrap.Modal(document.getElementById('cancelConfirmModal'));
        visitConfirmationModal = new bootstrap.Modal(document.getElementById('visitConfirmationModal'));
        assignVisitOffcanvas = new bootstrap.Offcanvas(document.getElementById('assignVisitOffcanvas'));
        new Datepicker(document.getElementById('datepicker-container'), { format: 'yyyy-mm-dd', autohide: true, todayHighlight: true });

        // --- HELPER & RENDER FUNCTIONS ---
        const showAlert = (message, type = 'success') => { $('#alert-container').html(`<div class="alert alert-${type} alert-dismissible fade show" role="alert">${message}<button type="button" class="btn-close" data-bs-dismiss="alert"></button></div>`).find('.alert').delay(4000).fadeOut(); };
        const getFormattedDate = (dateStr, hours) => { const d = new Date(dateStr); return d.toLocaleDateString('en-US', { month: 'long', day: 'numeric' }) + `, ${hours} hrs`; };
        const getRelativeTime = (dateStr) => { const n = new Date(), v = new Date(dateStr); n.setHours(0,0,0,0); v.setHours(0,0,0,0); const d = Math.ceil((v-n)/(1e3*60*60*24)); if(d<0) return "Past visit"; if(d===0) return "Today"; if(d===1) return "Tomorrow"; return `In ${d} days`; };
        const getProgressText = (p) => ({ '-1': "Canceled", '0': "Scheduled", '1': "Check-in", '2': "Check-out", '3': "Approved" }[p] || 'Unknown');

        const createTimePicker = (containerId) => {
            const container = $(`#${containerId}`); container.empty();
            const hourSelect = $('<select class="form-select me-2"><option value="">--</option></select>').attr('id', `${containerId}-hour`);
            const minuteSelect = $('<select class="form-select"><option value="">--</option></select>').attr('id', `${containerId}-minute`);
            for (let i = 0; i < 24; i++) hourSelect.append(`<option value="${i}">${String(i).padStart(2,'0')}</option>`);
            for (let i = 0; i < 60; i += 15) minuteSelect.append(`<option value="${i}">${String(i).padStart(2,'0')}</option>`);
            container.append($('<div class="time-picker-wrapper"><label class="form-label me-2">Start Time (Optional):</label></div>').append(hourSelect, ':', minuteSelect));
        };

        const renderVisitList = (visits) => {
            const listContainer = $('#visit-list'); listContainer.empty();
            if (!visits || visits.length === 0) { listContainer.html('<p class="text-center text-muted mt-4">No visits found.</p>'); return; }
            visits.forEach(v => {
                const patientName = `${v.patient.firstname} ${v.patient.lastname}`;
                const patientPhoto = (v.patient.photo && !v.patient.photo.endsWith('default.jpg')) ? (baseUrl + v.patient.photo) : 'https://via.placeholder.com/60';
                const progressText = getProgressText(v.progress);
                const durationHours = v.duration_minutes ? Math.floor(v.duration_minutes / 60) : (v.total_hours || 0);
                listContainer.append(`<div class="visit-card" data-visit-id="${v.id}"><div class="visit-person"><div class="visit-person-avatar"><img src="${patientPhoto}" alt="Patient"></div><div class="visit-person-name">${patientName}</div></div><div class="visit-details"><div class="visit-date">${getFormattedDate(v.start_time, durationHours)}</div><div class="visit-relative-time">${getRelativeTime(v.start_time)}</div><div class="visit-progress ${progressText === 'Canceled' ? 'visit-progress-canceled' : ''}">${progressText}</div></div></div>`);
            });
        };

        const renderSelectionList = (items, containerId, type) => {
            const listContainer = $(`#${containerId}`); listContainer.empty();
            if (!items || items.length === 0) { listContainer.html(`<p class="text-center text-muted mt-3">No ${type}s found.</p>`); return; }
            items.forEach(item => {
                let id = item.id; let name = `${item.firstname || ''} ${item.lastname || ''}`.trim();
                if (type === 'address') name = `${item.address}, ${item.city}, ${item.state} ${item.zipcode}`;
                const photo = (item.photo && !item.photo.endsWith('default.jpg')) ? (baseUrl + item.photo) : null;
                const iconClass = type === 'address' ? (item.type === 'Apartment' ? 'fa-building' : 'fa-house') : 'fa-user';
                listContainer.append(`<div class="selection-item" data-id="${id}" data-name="${name}"><div class="item-avatar">${photo ? `<img src="${photo}" class="rounded-circle w-100 h-100" style="object-fit:cover;" alt="Avatar">` : `<i class="fa-solid ${iconClass} fs-3"></i>`}</div><div>${name}</div></div>`);
            });
        };

        const checkFormCompleteness = () => { if (newVisitState.patientId && newVisitState.addressId && newVisitState.visitDate && newVisitState.totalHours) { $('#create-visit-btn').fadeIn(); } else { $('#create-visit-btn').fadeOut(); } };

        function resetFormState() {
            Object.keys(newVisitState).forEach(k => { if(k !== 'caregiverId' && k !== 'caregiverFullname') newVisitState[k] = null; });
            $('.selection-item.selected').removeClass('selected');
            $('#address-tab-btn').addClass('disabled');
            $('#address-selection-content, #create-visit-btn').hide();
            $('#address-selection-placeholder').show();
            $('#total-hours-select').val(null);
            createTimePicker('start-time-picker');
            const dpInstance = Datepicker.getInstance(document.getElementById('datepicker-container'));
            if(dpInstance) { dpInstance.setDate({clear: true}); }
            const patientTabBtn = document.getElementById('patient-tab-btn');
            if(patientTabBtn) { bootstrap.Tab.getOrCreateInstance(patientTabBtn).show(); }
        }

        // --- API CALLS ---
        const fetchMyVisits = () => {
            $('#visit-list').html('<div class="text-center p-5"><div class="spinner-border"></div></div>');
            $.ajax({ url: `${baseUrl}/user/visits/${caregiverId}`, headers: { 'Authorization': authToken },
                success: (res) => { if (res.status === 'success') { allVisits = res.data.visits || []; applyFilters(); } else { allVisits = []; applyFilters(); } },
                error: () => { showAlert('Error fetching visits.', 'danger'); allVisits = []; applyFilters(); }
            });
        };
        const fetchAssignedPatients = () => $.ajax({ url: `${baseUrl}/assigned/patients/${caregiverId}`, headers: { 'Authorization': authToken } });
        const fetchPatientAddresses = (patientId) => $.ajax({ url: `${baseUrl}/address/person/${patientId}/1`, headers: { 'Authorization': authToken } });
        const performVisitAction = (action, visitId) => {
            $.ajax({ url: `${baseUrl}/visit/${visitId}/${action}`, type: 'PUT', headers: { 'Authorization': authToken },
                success: (res) => { showAlert(res.message || `Visit ${action} successful.`, 'success'); fetchMyVisits(); },
                error: (xhr) => showAlert(xhr.responseJSON?.message || `Failed to ${action} visit.`, 'danger')
            });
        };
        const performCancelVisit = (visitId) => {
            $.ajax({ url: `${baseUrl}/visit/${visitId}/cancel`, type: 'PUT', headers: { 'Authorization': authToken },
                success: (res) => { showAlert(res.message || 'Visit canceled.', 'success'); fetchMyVisits(); },
                error: (xhr) => showAlert(xhr.responseJSON?.message || 'Failed to cancel visit.', 'danger')
            });
        };

        // --- FILTERING ---
        function applyFilters() {
            const visitProgress = $('.filter-buttons .filter-btn.active').data('filter-value');
            const searchTerm = $('#search-input-main').val().toLowerCase();
            const filtered = allVisits.filter(v =>
                (visitProgress === 'all' || v.progress == visitProgress) &&
                (searchTerm === '' || `${v.patient.firstname} ${v.patient.lastname}`.toLowerCase().includes(searchTerm))
            );
            renderVisitList(filtered);
        }

        // --- EVENT LISTENERS ---
        $('.filter-btn').on('click', function() { $(this).addClass('active').siblings().removeClass('active'); applyFilters(); });
        $('#main-search-btn, #search-input-main').on('keyup', applyFilters);

        $('#visit-list').on('click', '.visit-card', function(e) {
            e.preventDefault();
            selectedVisitId = $(this).data('visit-id');
            const visit = allVisits.find(v => v.id == selectedVisitId);
            if (!visit) return;
            $('#actions-modal-title').text(`Visit to ${visit.patient.firstname}`);
            const addressString = `${visit.address.address}, ${visit.address.city}, ${visit.address.state}`;
            $('#action-navigate-btn').attr('href', `https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(addressString)}`);
            $('#action-detail-btn').attr('href', `/visit/detail/${visit.id}`);
            actionsModal.show();
        });

        $('#action-checkin-btn').on('click', () => { if(selectedVisitId) performVisitAction('checkin', selectedVisitId); actionsModal.hide(); });
        $('#action-checkout-btn').on('click', () => { if(selectedVisitId) performVisitAction('checkout', selectedVisitId); actionsModal.hide(); });
        $('#cancel-visit-btn').on('click', () => { actionsModal.hide(); cancelConfirmModal.show(); });
        $('#confirm-cancel-yes-btn').on('click', () => { if (selectedVisitId) { performCancelVisit(selectedVisitId); } cancelConfirmModal.hide(); });

        // --- ADD VISIT OFFCANVAS LISTENERS ---
        $('#add-visit-btn').on('click', (e) => {
            e.preventDefault();
            fetchAssignedPatients().done(res => {
                allAssignedPatients = res.data.patients;
                renderSelectionList(allAssignedPatients, 'patient-selection-list', 'patient');
            });
            assignVisitOffcanvas.show();
        });

        $('#assignVisitOffcanvas').on('hidden.bs.offcanvas', resetFormState);

        $('#patient-search').on('keyup', function() { const s = $(this).val().toLowerCase(); renderSelectionList(allAssignedPatients.filter(p => `${p.firstname} ${p.lastname}`.toLowerCase().includes(s)), 'patient-selection-list', 'patient'); });
        $('#address-search').on('keyup', function() { const s = $(this).val().toLowerCase(); renderSelectionList(allPatientAddresses.filter(a => a.address.toLowerCase().includes(s)), 'address-selection-list', 'address'); });

        $('#patient-selection-list').on('click', '.selection-item', function() { const el=$(this); newVisitState.patientId = el.data('id'); newVisitState.patientFullname = el.data('name'); el.addClass('selected').siblings().removeClass('selected'); bootstrap.Tab.getOrCreateInstance(document.getElementById('address-tab-btn')).show(); checkFormCompleteness(); });
        $('#address-selection-list').on('click', '.selection-item', function() { const el=$(this); newVisitState.addressId = el.data('id'); newVisitState.address = el.data('name'); el.addClass('selected').siblings().removeClass('selected'); bootstrap.Tab.getOrCreateInstance(document.getElementById('date-tab-btn')).show(); checkFormCompleteness(); });

        $(document.getElementById('datepicker-container')).on('changeDate', function(e) { newVisitState.visitDate = e.detail.date; checkFormCompleteness(); });
        $('#start-time-picker').on('change', 'select', function() { const h = $('#start-time-picker-hour').val(), m = $('#start-time-picker-minute').val(); newVisitState.startTime = (h !== "" && m !== "") ? { h: parseInt(h), m: parseInt(m) } : null; });
        $('#total-hours-select').on('change', function() { newVisitState.totalHours = parseInt($(this).val()); checkFormCompleteness(); });

        $('button[data-bs-toggle="tab"]').on('show.bs.tab', function(e) {
            const targetTab = e.target.id;
            if (targetTab === 'address-tab-btn' && !newVisitState.patientId) return false;
            if (targetTab === 'address-tab-btn') { $('#address-selection-content').show(); $('#address-selection-placeholder').hide(); fetchPatientAddresses(newVisitState.patientId).done(res => { allPatientAddresses = res.data; renderSelectionList(allPatientAddresses, 'address-selection-list', 'address'); }); }
        });

        $('#create-visit-btn').on('click', function() {
            const { patientFullname, visitDate, startTime, totalHours } = newVisitState;
            const visitDay = new Date(visitDate).toLocaleDateString('en-US', { month: 'long', day: 'numeric'});
            let timeText = `for ${totalHours} hours.`;
            if (startTime) { const startStr = `${startTime.h % 12 || 12}:${String(startTime.m).padStart(2,'0')} ${startTime.h >= 12 ? 'PM' : 'AM'}`; timeText = `starting around ${startStr} for ${totalHours} hours.` }
            $('#visit-confirmation-text').html(`A visit for <strong>${patientFullname}</strong> will be created on <strong>${visitDay}</strong>, attended by <strong>${caregiverFullname}</strong> ${timeText}`);
            visitConfirmationModal.show();
        });

        $('#confirm-create-visit-btn').on('click', function() {
            const { patientId, addressId, visitDate, startTime, totalHours } = newVisitState;
            const payload = { user_id: caregiverId, patient_id: patientId, address_id: addressId, visit_date: new Date(visitDate).toISOString().slice(0, 10), total_hours: totalHours };
            if (startTime) { const startDatetime = new Date(visitDate); startDatetime.setHours(startTime.h, startTime.m, 0, 0); payload.start_time = startDatetime.toISOString().slice(0, 19).replace('T', ' '); }
            $.ajax({ url: `${baseUrl}/visit`, type: 'POST', headers: { 'Authorization': authToken, 'Content-Type': 'application/json' }, data: JSON.stringify(payload),
                success: () => { showAlert('Visit created!', 'success'); visitConfirmationModal.hide(); assignVisitOffcanvas.hide(); fetchMyVisits(); },
                error: (xhr) => showAlert(xhr.responseJSON?.message || 'Failed to create visit.', 'danger')
            });
        });

        // --- INITIALIZATION ---
        fetchMyVisits();
    });
</script>

</body>
</html>