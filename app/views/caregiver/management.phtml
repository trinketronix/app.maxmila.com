<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><?=$pageTitle?>></title>

    <!-- Bootstrap 5.1 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">

    <!-- Font Awesome CDN for Icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css">

    <style>
        html, body {
            height: 100vh;
            overflow: hidden;
            background-color: #f0f2f5;
            font-family: 'Segoe UI', 'Roboto', sans-serif;
        }

        .page-container {
            display: flex;
            flex-direction: column;
            height: 100vh;
            max-width: 500px;
            margin: 0 auto;
            background-color: #ffffff;
            border-left: 1px solid #dcdcdc;
            border-right: 1px solid #dcdcdc;
            position: relative;
        }

        /* --- Header & Controls (Fixed) --- */
        .header { display: flex; justify-content: space-between; align-items: center; padding: 1rem; position: relative; flex-shrink: 0; }
        .back-button { text-decoration: none; color: #333; font-weight: 500; }
        .header-title { font-size: 2.2rem; font-weight: bold; margin: 0; position: absolute; left: 50%; transform: translateX(-50%); }
        .profile { text-align: center; }
        .profile-icon { font-size: 1.5rem; border: 2px solid #000; border-radius: 50%; width: 45px; height: 45px; display: flex; align-items: center; justify-content: center; margin: 0 auto; overflow: hidden; }
        .profile-icon img { width: 100%; height: 100%; object-fit: cover; }
        .profile-username { font-size: 0.8rem; color: #555; margin-top: 4px; }
        .controls-section { padding: 1rem; background-color: #f8f9fa; border-bottom: 1px solid #e0e0e0; flex-shrink: 0; }
        .search-bar .form-control, .search-bar .btn { border-radius: 8px; border: 2px solid #000; }
        .filter-buttons { display: flex; overflow-x: auto; padding-top: 1rem; gap: 0.5rem; }
        .filter-btn { border: 2px solid #000; border-radius: 8px; background-color: #fff; color: #000; font-weight: 500; white-space: nowrap; }
        .filter-btn.active { background-color: #000; color: #fff; }
        .filter-buttons::-webkit-scrollbar { display: none; }

        /* --- User List (Scrollable) --- */
        .user-list-container {
            flex-grow: 1;
            overflow-y: auto;
            padding: 1rem;
            padding-bottom: 120px; /* Space for FAB */
        }
        .user-item {
            display: grid; grid-template-columns: auto 1fr; gap: 1rem;
            border: 2px solid #000; border-radius: 15px;
            padding: 1rem; margin-bottom: 1rem; cursor: pointer;
            transition: background-color 0.2s;
        }
        .user-item:hover { background-color: #f1f1f1; }
        .user-avatar { grid-row: 1 / 3; width: 60px; height: 60px; border-radius: 50%; border: 3px solid #000; overflow: hidden; }
        .user-avatar img { width: 100%; height: 100%; object-fit: cover; }
        .user-info { grid-column: 2 / 3; }
        .user-name { font-weight: bold; font-size: 1.1rem; }
        .user-role, .user-phone { color: #555; }
        .user-status { grid-column: 2 / 3; font-weight: bold; }
        .status-active { color: #198754; }
        .status-inactive { color: #dc3545; }
        .status-not-verified { color: #fd7e14; }
        .status-archived { color: #6f42c1; }
        .status-deleted { color: #6c757d; }

        /* --- FAB & Offcanvas --- */
        .fab {
            position: absolute; bottom: 20px; left: 50%;
            transform: translateX(-50%);
            width: 80px; height: 80px; border-radius: 50%;
            background-color: #e0e0e0; border: 3px solid #000;
            display: flex; flex-direction: column; align-items: center; justify-content: center;
            font-weight: 500; text-decoration: none; color: #000;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2); z-index: 1040;
        }
        .fab .plus-icon { font-size: 2rem; line-height: 1; }
        .offcanvas-header { border-bottom: 1px solid #dee2e6; }
        #resultModal .modal-footer { border-top: 0; }
        #resultModal .close-btn { background: #000; color: #fff; border-radius: 50%; width: 50px; height: 50px; border: 0; }

        @media (min-width: 768px) { .page-container { max-width: 720px; } }
    </style>
</head>
<body onload="initializePage()">

<div id="alert-container" style="position: fixed; top: 10px; left: 50%; transform: translateX(-50%); z-index: 2000; width: 90%; max-width: 480px;"></div>

<div class="page-container">
    <!-- Header -->
    <header class="header">
        <a href="/dashboard/admin" class="back-button"><i class="fas fa-chevron-left"></i> Back</a>
        <h1 class="header-title">Management</h1>
        <h2 class="header-subtitle" style="position: absolute; left: 50%; transform: translateX(-50%); top: 4.5rem; font-size: 1.5rem; color: #555;">Caregivers</h2>
        <div class="profile">
            <div class="profile-icon"><img id="admin-avatar-img" src="" style="display:none;" alt="Admin"></div>
            <span class="profile-username"><?=$fullname?></span>
        </div>
    </header>

    <!-- Controls -->
    <section class="controls-section">
        <div class="input-group search-bar">
            <input type="text" id="search-input" class="form-control" placeholder="Search caregiver...">
            <button class="btn btn-dark" type="button" id="search-button">Search</button>
        </div>
        <div class="filter-buttons">
            <button class="btn filter-btn active" data-filter-status="all">All</button>
            <button class="btn filter-btn" data-filter-status="-1">Not Verified</button>
            <button class="btn filter-btn" data-filter-status="1">Active</button>
            <button class="btn filter-btn" data-filter-status="0">Inactive</button>
            <button class="btn filter-btn" data-filter-status="2">Archived</button>
            <button class="btn filter-btn" data-filter-status="3">Deleted</button>
        </div>
    </section>

    <!-- User List -->
    <main class="user-list-container">
        <div id="user-list">
            <div class="text-center p-5"><div class="spinner-border"></div></div>
        </div>
    </main>
</div>

<!-- Floating Action Button -->
<a href="#" class="fab" id="add-caregiver-btn">
    <div class="plus-icon">+</div>
    <div>Caregiver</div>
</a>

<!-- Offcanvas for Add Caregiver Form -->
<div class="offcanvas offcanvas-bottom" tabindex="-1" id="addCaregiverOffcanvas" style="height: auto;">
    <div class="offcanvas-header">
        <h5 class="offcanvas-title w-100 text-center">Add Caregiver</h5>
        <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas"></button>
    </div>
    <div class="offcanvas-body">
        <form id="add-caregiver-form" class="mx-auto" style="max-width: 400px;">
            <div class="input-group mb-3">
                <span class="input-group-text"><i class="fa-solid fa-user"></i></span>
                <input type="text" class="form-control" id="form-username" placeholder="Username" required>
            </div>
            <div class="input-group mb-3">
                <span class="input-group-text"><i class="fa-solid fa-lock"></i></span>
                <input type="password" class="form-control" id="form-password" placeholder="Password" required>
            </div>
            <div class="input-group mb-4">
                <span class="input-group-text"><i class="fa-solid fa-lock"></i></span>
                <input type="password" class="form-control" id="form-confirm-password" placeholder="Confirm Password" required>
            </div>
            <button type="submit" class="btn w-100" style="border: 2px solid #000; font-weight: 500;">Add Caregiver</button>
        </form>
    </div>
</div>

<!-- Modal for API Call Result -->
<div class="modal fade" id="resultModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content" style="border-radius: 15px;">
            <div class="modal-header">
                <h5 class="modal-title w-100 text-center">Message</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body text-center fs-5 py-4" id="result-modal-message">
                <!-- Message will be injected here -->
            </div>
            <div class="modal-footer justify-content-center">
                <button type="button" class="close-btn" data-bs-dismiss="modal"><i class="fa-solid fa-xmark fs-4"></i></button>
            </div>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
<script>
    const adminId = <?=$userId?>;
    const baseUrl = '<?=$baseUrl?>';
    const token = '<?=$token?>';

    let allUsers = [];
    let addCaregiverOffcanvas;
    let resultModal;

    // --- HELPER FUNCTIONS ---
    const showAlert = (message, type = 'success') => {
        const alertHtml = `<div class="alert alert-${type} alert-dismissible fade show" role="alert">${message}<button type="button" class="btn-close" data-bs-dismiss="alert"></button></div>`;
        $('#alert-container').html(alertHtml).find('.alert').delay(4000).fadeOut();
    };

    const showResultModal = (message, type = 'success') => {
        $('#result-modal-message').text(message).removeClass('text-danger text-success').addClass(type === 'success' ? 'text-success' : 'text-danger');
        resultModal.show();
    };

    const getRoleText = role => ({'0': 'Administrator', '1': 'Manager', '2': 'Caregiver'}[role] || 'User');
    const getStatusInfo = status => {
        const map = {
            '-1': { text: "Not Verified", class: "status-not-verified" }, '0': { text: "Inactive", class: "status-inactive" },
            '1': { text: "Active", class: "status-active" }, '2': { text: "Archived", class: "status-archived" },
            '3': { text: "Deleted", class: "status-deleted" }
        };
        return map[status] || { text: 'Unknown', class: '' };
    };

    const renderUserList = (users) => {
        const listContainer = $('#user-list');
        listContainer.empty();
        if (!users || users.length === 0) {
            listContainer.html('<p class="text-center text-muted">No users found.</p>');
            return;
        }
        users.forEach(user => {
            const fullName = `${user.firstname || ''} ${user.lastname || ''}`.trim();
            const statusInfo = getStatusInfo(user.status);
            const roleText = getRoleText(user.role);
            const photoSrc = (user.photo) ? (baseUrl + user.photo) : 'https://via.placeholder.com/60'; // Placeholder for default
            const cardHtml = `
                    <div class="user-item" data-user-id="${user.id}" data-status="${user.status}">
                        <div class="user-avatar"><img src="${photoSrc}" alt="Avatar"></div>
                        <div class="user-info">
                            <div class="user-name">${fullName}</div>
                            <div class="user-phone">${user.phone || 'No phone'}</div>
                            <div class="user-role">${roleText}</div>
                        </div>
                        <div class="user-status ${statusInfo.class}">${statusInfo.text}</div>
                    </div>`;
            listContainer.append(cardHtml);
        });
    };

    // --- API & LOGIC FUNCTIONS ---
    function runInitialCalls() {
        $.ajax({
            url: `${baseUrl}/user/photo/${adminId}`,
            headers: { 'Authorization': token },
            success: (res) => {
                if(res.data.photo) $('#admin-avatar-img').attr('src', baseUrl + res.data.photo).show();
            }
        });
        fetchUserList();
    }

    function fetchUserList() {
        return $.ajax({
            url: `${baseUrl}/accounts`,
            headers: { 'Authorization': token },
            success: (response) => {
                if (response.status === 'success' && response.data.users) {
                    allUsers = response.data.users;
                    renderUserList(allUsers);
                    showAlert(`Loaded ${response.data.count} users successfully.`, 'success');
                } else { throw new Error('Failed to parse users'); }
            },
            error: () => showAlert('Error fetching user list.', 'danger')
        });
    }

    function handleRegisterSubmit(event) {
        event.preventDefault();
        const username = $('#form-username').val();
        const password = $('#form-password').val();
        const confirmPassword = $('#form-confirm-password').val();

        if (password !== confirmPassword) {
            showAlert('Passwords do not match.', 'danger');
            return;
        }

        $.ajax({
            url: `${baseUrl}/auth/register`,
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({ username, password }),
            success: (response) => {
                showResultModal('Caregiver added successfully!');
                addCaregiverOffcanvas.hide();
                fetchUserList();
            },
            error: (xhr) => {
                const errorMsg = xhr.responseJSON?.message || 'An unknown error occurred.';
                showResultModal(`Failed to add caregiver: ${errorMsg}`, 'danger');
            }
        });
    }

    function simulatePost(userId) {
        // This function creates and prepares a form for submission without actually submitting it.
        // This fulfills the requirement to "prepare the click for a post request".
        const form = $('<form>', {
            action: 'https://app-test.maxmilahomcare.com/user/profile', // Corrected Host
            method: 'POST',
            target: '_blank', // Open in new tab to not disrupt current page
            style: 'display:none;'
        });
        form.append($('<input>', { name: 'userid', value: userId }));
        $('body').append(form);
        console.log("Simulating POST request for user ID:", userId);
        console.log("Form prepared:", form.get(0));
        // To actually submit, you would call: form.submit();
        // We will not submit it to stay on the single page.
    }

    function applyFiltersAndSearch() {
        const searchTerm = $('#search-input').val().toLowerCase();
        const activeFilterStatus = $('.filter-btn.active').data('filter-status').toString();

        $('.user-item').each(function() {
            const item = $(this);
            const itemStatus = item.data('status').toString();
            const itemText = item.text().toLowerCase();

            const statusMatch = (activeFilterStatus === 'all' || itemStatus === activeFilterStatus);
            const searchMatch = (searchTerm === '' || itemText.includes(searchTerm));

            if (statusMatch && searchMatch) {
                item.show();
            } else {
                item.hide();
            }
        });
    }

    // --- PAGE INITIALIZATION ---
    function initializePage() {
        addCaregiverOffcanvas = new bootstrap.Offcanvas(document.getElementById('addCaregiverOffcanvas'));
        resultModal = new bootstrap.Modal(document.getElementById('resultModal'));

        fetchUserList();

        // Event Listeners
        $('.filter-btn').on('click', function() {
            $('.filter-btn').removeClass('active');
            $(this).addClass('active');
            applyFiltersAndSearch();
        });

        $('#search-button, #search-input').on('click keyup', applyFiltersAndSearch);

        $('#user-list').on('click', '.user-item', function() {
            const userId = $(this).data('user-id');
            simulatePost(userId);
        });

        $('#add-caregiver-btn').on('click', (e) => { e.preventDefault(); addCaregiverOffcanvas.show(); });

        $('#add-caregiver-form').on('submit', handleRegisterSubmit);
    }
</script>
</body>
</html>